/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package touch_type;

import java.awt.Container;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Random;
import java.util.List;
import java.util.Arrays;

/**
 *
 * @author Tom
 */
public class Typing extends javax.swing.JFrame {

    /**
     * Creates new form Typing
     */
    public Typing() {
        initComponents();
    }

    /**
     * My Variables
     */
    public static int mode = 0;
    private int colour = 0;
    private ArrayList<String> textArray = new ArrayList<>();
    private Long startTime;
    private Long endTime;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TypingHome = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        TextInput = new javax.swing.JTextField();
        ColourBlind = new javax.swing.JToggleButton();
        Magnify = new javax.swing.JToggleButton();
        Clock = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 750));
        setSize(new java.awt.Dimension(1000, 750));

        TypingHome.setText("Home");
        TypingHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypingHomeActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TextOutput.setEditable(false);
        TextOutput.setColumns(20);
        TextOutput.setLineWrap(true);
        TextOutput.setRows(5);
        TextOutput.setText("...");
        jScrollPane1.setViewportView(TextOutput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TextInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextInputFocusGained(evt);
            }
        });
        TextInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextInputKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(TextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ColourBlind.setText("Colour Blind");
        ColourBlind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColourBlindActionPerformed(evt);
            }
        });

        Magnify.setText("Magnify");
        Magnify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MagnifyActionPerformed(evt);
            }
        });

        Clock.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        Clock.setText("Click to begin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(TypingHome))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(ColourBlind)
                .addGap(602, 602, 602)
                .addComponent(Magnify))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Clock)
                .addGap(395, 395, 395))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(TypingHome)
                .addGap(34, 34, 34)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Clock)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ColourBlind)
                    .addComponent(Magnify)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ColourBlindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColourBlindActionPerformed
        Container c = getContentPane();
        
        if (ColourBlind.isSelected())
        {
            colour = 1;
        }
        else
        {
            colour = 0;
        }
        
    }//GEN-LAST:event_ColourBlindActionPerformed

    private void MagnifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MagnifyActionPerformed
        Container c = getContentPane();
        
        if (Magnify.isSelected())
        {
            Font large = new Font("Sansserif", Font.PLAIN, 28);
            TextOutput.setFont(large);
        }
        else
        {
            Font small = new Font("Sansserif", Font.PLAIN, 18);
            TextOutput.setFont(small);
        }
    }//GEN-LAST:event_MagnifyActionPerformed

    private void TypingHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypingHomeActionPerformed
        Menu menu = new Menu();
        menu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_TypingHomeActionPerformed

    private void TextInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextInputKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextInputKeyPressed

    private void TextInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextInputFocusGained

        startTime = System.currentTimeMillis();
        Container c = getContentPane();
        Stats stats = new Stats();
        Random random = new Random();
        String textDisplay = "";
        ArrayList<String> splitArray = new ArrayList<>();
        
        switch (mode) {
        case 1:
            String[] letterArray = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
             
            int countLetters = 25;          
            
            for(int i = 0; i < 20; i++)
            {
                int position = random.nextInt(countLetters); 
                String letter = letterArray[position];
                textArray.add(letter);
                
                for(String text : textArray)
                {
                    textDisplay = textDisplay.concat(text);
                }
            }
            break;
        case 2:
            
            String[] wordArray = {"case","voice","prosper","trolley","factor","coffee","expose","session","retire","requirement","on","assembly","asylum","theory","entry","concentration","conviction","gene","mixture","conscious"," donor","score","reception","telephone","planet","pavement","tune","horseshoe","current","modest","calculation","offset","fish","permanent","staircase","round","crew","by","bike","experience","other","net","fall","adoption","go","speculate","poor","imposter","giant","midnight","dull","blind","finance","straw","jet","trouble","soap","plot","sight","twilight","audience","bind","fund","field","speed","communication","distortion","perform","rugby","extension","cooperation"};

            int countWords = 70;          
            
            for(int i = 0; i < 10; i++)
            {
                int position = random.nextInt(countWords); 
                String word = wordArray[position];
                String wordSplit[] = word.split("");                
                
                for (String wordSplit1 : wordSplit) {
                    splitArray.add(wordSplit1);
                }                
                if(i != 9)
                {
                    splitArray.add(" ");
                }
                
                for(String text : splitArray)
                {
                    textArray.add(text);
                    textDisplay = textDisplay.concat(text);
                }
            } 
             break;
        case 3:
            
            String[] paragraphArray = {"Hello i am John Johnson and i am a career criminal and make a lot of money.","What is the meaning of life and why is it fourty two?","Who are you and how did you get into my house. Get out or i will call the police!","I like my coffee black with two sugars. Why? Because I hate milk.","I cannot sleep, every day blurs together. I think i should see a doctor because this is not normal. What do you think?"};
            int countParagraph = 5;          

            int position = random.nextInt(countParagraph); 
            String paragraph = paragraphArray[position];
            String paragraphSplit[] = paragraph.split("");
                
            for (String paraSplit : paragraphSplit) {
                splitArray.add(paraSplit);
            } 
                
            for(String text : splitArray)
            {
                textArray.add(text);
                textDisplay = textDisplay.concat(text);
            }

             break;
        }
        
        TextOutput.setText(textDisplay);
    }//GEN-LAST:event_TextInputFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Typing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Typing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Typing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Typing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Typing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Clock;
    private javax.swing.JToggleButton ColourBlind;
    private javax.swing.JToggleButton Magnify;
    private javax.swing.JTextField TextInput;
    private javax.swing.JTextArea TextOutput;
    private javax.swing.JButton TypingHome;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * used to set the mode when button is clicked on menu and this frame is
     * opened.
     * @param modeInput 
     */
    public void setMode(int modeInput)
    {
        mode = modeInput;
    }
    
    
    
}
